<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello Hexo</title>
    <url>/2020/09/05/Hello-Hexo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>初识结构模板：pair类型简谈</title>
    <url>/2020/09/05/%E5%88%9D%E8%AF%86%E7%BB%93%E6%9E%84%E6%A8%A1%E6%9D%BF%EF%BC%9Apair%E7%B1%BB%E5%9E%8B%E7%AE%80%E8%B0%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天补网课的时候看到<a href="https://www.luogu.com.cn/problem/P1443">P1443 马的遍历</a>这道题，</p>
<p>属于BFS的一种简单应用，</p>
<p>但是需要对队列的知识有一点了解。</p>
<p>看到大部分题解都使用了pair类型来储存马的坐标</p>
<p>于是打算了解一下其使用方法：</p>
<h2 id="pair">pair</h2>
<p>c++中的结构模板，定义在头文件<utility>中，</p>
<p>提供一个包含2个数据成员的结构体模板，</p>
<p>通过<strong>first，second</strong>访问2个成员。</p>
<h3 id="pair的应用">pair的应用</h3>
<p>pair是将2个数据组合成一个数据，当需要这样的需求时就可以使用pair。</p>
<p>pair类型类似于含两个成员的结构体，</p>
<p>可用于存储<strong>点的坐标</strong>。</p>
<h3 id="pair的构造">pair的构造</h3>
<p>std::pair主要的作用是将两个数据组合成一个数据，</p>
<p>两个数据可以是同一类型或者不同类型。</p>
<p>例如std::pair 或者 std::pair等。pair实质上是一个结构体，其主要的两个成员变量是first和second，这两个变量可以直接使用。</p>
<p>初始化一个pair可以使用构造函数，也可以使用std::make_pair函数，make_pair函数的定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span> <span class="built_in">pair</span> <span class="title">make_pair</span><span class="params">(T1 a, T2 b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">pair</span>(a, b); </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>一般make_pair都使用在需要pair做参数的位置，</p>
<p><strong>可以直接调用make_pair生成pair对象。</strong></p>
<p>另一个使用的方面就是pair可以接受隐式的类型转换，这样可以获得更高的灵活度。</p>
<p>但是这样会出现如下问题：例如有如下两个定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">pair</span>(<span class="number">1</span>, <span class="number">1.1</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">1.1</span>);</span><br></pre></td></tr></table></figure>
<p>其中第一个的second变量是float类型，</p>
<p>而make_pair函数会将second变量都转换成double类型。</p>
<h3 id="实例">实例</h3>
<p>下面是一段pair与make_pair的例子程序：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="built_in">pair</span> &lt;<span class="built_in">string</span>,<span class="keyword">double</span>&gt; product1 (<span class="string">&quot;tomatoes&quot;</span>,<span class="number">3.25</span>);</span><br><span class="line"><span class="built_in">pair</span> &lt;<span class="built_in">string</span>,<span class="keyword">double</span>&gt; product2;</span><br><span class="line"><span class="built_in">pair</span> &lt;<span class="built_in">string</span>,<span class="keyword">double</span>&gt; product3; </span><br><span class="line">  </span><br><span class="line">product2.first =<span class="string">&quot;lightbulbs&quot;</span>; 				<span class="comment">// type of first is string</span></span><br><span class="line">product2.second =<span class="number">0.99</span>; 					<span class="comment">// type of second is double </span></span><br><span class="line">product3 = <span class="built_in">make_pair</span> (<span class="string">&quot;shoes&quot;</span>,<span class="number">20.0</span>);</span><br><span class="line">  </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;The price of &quot;</span>&lt;&lt; product1.first &lt;&lt;<span class="string">&quot; is $&quot;</span>&lt;&lt; product1.second &lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;The price of &quot;</span>&lt;&lt; product2.first &lt;&lt;<span class="string">&quot; is $&quot;</span>&lt;&lt; product2.second &lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;The price of &quot;</span>&lt;&lt; product3.first &lt;&lt;<span class="string">&quot; is $&quot;</span>&lt;&lt; product3.second &lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++之路</category>
      </categories>
      <tags>
        <tag>语言功能</tag>
      </tags>
  </entry>
  <entry>
    <title>运算升级：位运算</title>
    <url>/2020/09/05/%E8%BF%90%E7%AE%97%E5%8D%87%E7%BA%A7%EF%BC%9A%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天在刷递归题的时候看到看到两道比较有意思的题</p>
<p><a href="https://www.luogu.com.cn/problem/P1036">P1036 选数</a> 和 <a href="https://www.luogu.com.cn/problem/P1010">P1010 幂次方</a></p>
<p>鉴于我搜索回溯都还没学，数据处理也比较菜，就想到尝试用位运算的方法来解决。</p>
<p>不说废话了来认识一下位运算的一些性质吧。</p>
<h2 id="为什么使用位运算">为什么使用位运算</h2>
<ul>
<li>
<p>数字在计算机中以二进制形式储存，所以使用位运算符计算比使</p>
<p>用算数运算符速度更快</p>
</li>
<li>
<p>对于一类特定的问题，如子集问题，改写数字等，使用二进制&amp;</p>
<p>位运算是十分直观的方法。</p>
</li>
</ul>
<h2 id="位运算的基础运算符">位运算的基础运算符</h2>
<p>先来看一段示例程序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A = <span class="number">85</span>, B = <span class="number">51</span>;</span><br><span class="line"><span class="keyword">int</span> p, q, r, s, u, v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = A &amp; B;</span><br><span class="line">    q = A | B;</span><br><span class="line">    r = A ^ B;</span><br><span class="line">    s = ~A;</span><br><span class="line">    u = A &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    v = A &gt;&gt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d %d %d&quot;</span>, p, q, r, s, u, v);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">17 119 102 -86 340 10</span><br></pre></td></tr></table></figure>
<h3 id="分析">分析</h3>
<p>首先将A B改写为二进制数</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">6</th>
<th style="text-align:center">5</th>
<th style="text-align:center">4</th>
<th style="text-align:center">3</th>
<th style="text-align:center">2</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>&amp;：按位与运算符</p>
<p>与 逻辑运算符&amp;&amp;类似，当参与运算的值均为1时才返回1</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">A</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">A&amp;B</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>|:   按位或运算符</p>
<p>与逻辑运算符  ||  相似，当参与运算的值至少有一个为1就返回1</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">A</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">AorB</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>^ : 按位异或运算符</p>
<p>只有参与运算的值不完全相同才返回1，若均相同（不管同为1还</p>
<p>是0）则输出0.</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">A</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">A^B</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>~ ： 非运算符</p>
<p>输出将输入数据每一位取反</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">A</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">~A</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>&lt;&lt; : 左移运算符</p>
<p>将输入的数据向左（向高位）移位，后面用0补齐</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">8</th>
<th style="text-align:center">7</th>
<th style="text-align:center">6</th>
<th style="text-align:center">5</th>
<th style="text-align:center">4</th>
<th style="text-align:center">3</th>
<th style="text-align:center">2</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">A&lt;&lt;2</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<p>将两数转换为十进制</p>
<p>A : 85<br>
A&lt;&lt;2 : 340</p>
<p>可以发现将A左移2位相当于乘以2^2</p>
<p>所以得出：A&lt;&lt;n = A * 2^n</p>
<ul>
<li>
<p>: 右移运算符</p>
<p>将输入的数据向右（向低位）移位，前面用0补齐</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">6</th>
<th style="text-align:center">5</th>
<th style="text-align:center">4</th>
<th style="text-align:center">3</th>
<th style="text-align:center">2</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">A&gt;&gt;2</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<p>A = 85</p>
<p>A&gt;&gt;2 = 21</p>
<p>可以发现，与左移相反，右移n位可以将数除以2的n次方</p>
<h2 id="喜闻乐见的例题讲解">喜闻乐见的例题讲解</h2>
<ol>
<li><a href="https://www.luogu.com.cn/problem/P1036">P1036 选数</a></li>
</ol>
<p>这道题其实就是让我们从n个元素中选k个相加，判断和是否为质数</p>
<p>让我们先来看一个简单的例子</p>
<p>假设我们有一个5个元素的数组(下标从1开始）</p>
<table>
<thead>
<tr>
<th style="text-align:center">i</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">a[ i ]</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
</tr>
</tbody>
</table>
<p>对于全集 <strong>U={ 1，2 ，3 ，4 ，5 }</strong> ,每个子集都包含其中任意个元素。</p>
<p>有没有什么办法可以给这些不同的子集编号呢？</p>
<p>我们可以以<strong>元素的存在情况</strong>作为依据：</p>
<p>令每个子集的编号为一个5位二进制数，如果其中一位对应的数在子</p>
<p>集中存在，那么那一位为1，否则为0。</p>
<p>以其中一个子集 <strong>S = { 1 , 3 , 5 }</strong> 为例，得到以下表格</p>
<table>
<thead>
<tr>
<th style="text-align:center">a[i]</th>
<th style="text-align:center">5</th>
<th style="text-align:center">4</th>
<th style="text-align:center">3</th>
<th style="text-align:center">2</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">U</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">S</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<ul>
<li>注意：对于二进制数来说，数位由高到低<strong>递减</strong>。</li>
</ul>
<p>则U的编号为11111，S的编号为10101，</p>
<p>转换成十进制后，U=31，S=21</p>
<p>我们惊喜的发现，<strong>U的大小就等于2^n-1</strong>(其中n为元素个数)</p>
<p>通过这种方法，每一个子集都有一个<strong>唯一</strong>的二进制编号与其一一对应。</p>
<p>接下来该做什么呢？</p>
<p>对于这道题来说，要求其中k个数的和，</p>
<p>就是求<strong>含k个元素的子集每个元素的和</strong>。</p>
<p>而我们编号之后会发现，如果一个子集有k个元素，<br>
那么它的编号中也必有k个‘1’</p>
<p>（如S = { 1 , 3 , 5 }的编号10101中有3个1）</p>
<p>到此为止，这道题的思路就很清晰了，</p>
<p>先计算U的大小，从1到U枚举S，判断S中’1‘的个数</p>
<p>如果等于k，就把S中的元素相加，判断是否为素数，记录答案即可。</p>
<p>AC程序如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;        //*判断质数时需使用sqrt()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;    //*使用__builtin_popcount()需包含该头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;   <span class="comment">//*判断是否为质数</span></span><br><span class="line">	<span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">2</span>||n==<span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(n);i++)</span><br><span class="line">		<span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cnt_1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;      <span class="comment">//*计算二进制数字中1的个数</span></span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;          <span class="comment">//*也可以用STL中内置的__builtin_popcount()函数代替</span></span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">            cnt++;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">int</span> U = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;               <span class="comment">//*U为全集，易知 U=2^n-1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> S = <span class="number">1</span>; S &lt;= U;S++)&#123;        <span class="comment">//*枚举每一个子集</span></span><br><span class="line">        <span class="keyword">if</span>(cnt_1(S)==k)&#123;                <span class="comment">//*判断子集中是否有k个元素</span></span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">                <span class="keyword">if</span>(S &amp; (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>)))      <span class="comment">//*判断第i个元素是否在S中</span></span><br><span class="line">                    sum += a[i];</span><br><span class="line">            <span class="keyword">if</span>(is_prime(sum))</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.<a href="https://www.luogu.com.cn/problem/P1010">P1010 幂次方</a></p>
<p>这道题其实就是让我们把一个十进制数改写成二的整数次幂之和</p>
<p>所以自然想到采用二进制的做法</p>
<p>我们以题目中的例子进行说明，先将137转换成二进制数观察</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">7</th>
<th style="text-align:center">6</th>
<th style="text-align:center">5</th>
<th style="text-align:center">4</th>
<th style="text-align:center">3</th>
<th style="text-align:center">2</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">137</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<p>很明显我们可以发现：</p>
<p>需要改写的那一位已经以‘1’的形式存在了</p>
<p>只需要记录数中每一个‘1’在第几位，再对位数递归分解</p>
<p>直到所有的‘1’都在第0~2位上结束。</p>
<p>像这样：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//todo 位运算部分</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">100</span>];                 <span class="comment">//*储存n的二进制数各位为1的情况</span></span><br><span class="line">    <span class="keyword">int</span> k = n, u=<span class="number">0</span>, i = <span class="number">0</span>;      <span class="comment">//*k暂存n，u作为下标，i记录为第几位</span></span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)</span><br><span class="line">            d[++u] = i;         <span class="comment">//*d[u]=i表示第u个1在第i位</span></span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;                <span class="comment">//*k右移1位</span></span><br><span class="line">        i++;                    <span class="comment">//*位数+1</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>继续来看，我们注意到137的二进制第7位为1，只需要再将7改写为二进制数如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">2</th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<p>此时所有的‘1’都已经在0~2位上，达到了递归的边界，判断输出即可。</p>
<p>附上AC代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 位运算部分</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">100</span>];                 <span class="comment">//*储存n的二进制数各位为1的情况</span></span><br><span class="line">    <span class="keyword">int</span> k = n, u=<span class="number">0</span>, i = <span class="number">0</span>;      <span class="comment">//*k暂存n，u作为下标，i记录为第几位</span></span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)</span><br><span class="line">            d[++u] = i;         <span class="comment">//*d[u]=i表示第u个1在第i位</span></span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;                <span class="comment">//*k右移1位</span></span><br><span class="line">        i++;                    <span class="comment">//*位数+1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 处理部分</span></span><br><span class="line">    <span class="keyword">while</span>(u)&#123;                   <span class="comment">//*从低到高储存后，从高到低处理</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(d[u]&gt;=<span class="number">3</span>)&#123;                        <span class="comment">//*由于题目要求只能用0，2表示，所以如果这个1在第3或更高位要递归继续分解</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;2(&quot;</span>);                   <span class="comment">//*后面还要递归，先把前面的括号输出</span></span><br><span class="line"></span><br><span class="line">            rec(d[u--]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(u)                           <span class="comment">//*如果u不为零，说明后面还有数，要输出‘+’</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;)+&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>                            <span class="comment">//*如果u为零，说明已经是最后一个，只输出‘）’</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>&#123;                   <span class="comment">//*如果1在&lt;=2位上</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(d[u]==<span class="number">1</span>&amp;&amp;u!=<span class="number">1</span>)               <span class="comment">//*如果‘1’在第一位上，且不是整个数中的第一个‘1’</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;2+&quot;</span>);               <span class="comment">//*后面还有其它‘1’，要输出‘+’</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(d[u]==<span class="number">1</span>)                <span class="comment">//*如果是第一个‘1’</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);                <span class="comment">//*后面没有其它‘1’了，不输出‘+’</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>((d[u]==<span class="number">0</span>||d[u]==<span class="number">2</span>)&amp;&amp;u!=<span class="number">1</span>)    <span class="comment">//*如果1在第二位或第零位上，且不是整个数中的第一个‘1’</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;2(%d)+&quot;</span>, d[u]);     <span class="comment">//*输出位权和‘+’</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(d[u]==<span class="number">0</span>||d[u]==<span class="number">2</span>)       <span class="comment">//*如果是第一个‘1’</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;2(%d)&quot;</span>, d[u]);      <span class="comment">//*只输出位权</span></span><br><span class="line"></span><br><span class="line">            u--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    rec(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++之路</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>二进制，位运算</tag>
        <tag>递归</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>about me</title>
    <url>/2020/09/11/about-me/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="a">A</h2>
<h3 id="bb">BB</h3>
]]></content>
  </entry>
</search>
